// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v6.31.1
// source: sequence.proto

package seq

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SequenceServiceClient is the client API for SequenceService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SequenceServiceClient interface {
	GenerateMessageId(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*MessageIdResponse, error)
	GenerateMessageSeq(ctx context.Context, in *MessageSeqRequest, opts ...grpc.CallOption) (*MessageResponse, error)
}

type sequenceServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSequenceServiceClient(cc grpc.ClientConnInterface) SequenceServiceClient {
	return &sequenceServiceClient{cc}
}

func (c *sequenceServiceClient) GenerateMessageId(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*MessageIdResponse, error) {
	out := new(MessageIdResponse)
	err := c.cc.Invoke(ctx, "/seq.v1.SequenceService/GenerateMessageId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sequenceServiceClient) GenerateMessageSeq(ctx context.Context, in *MessageSeqRequest, opts ...grpc.CallOption) (*MessageResponse, error) {
	out := new(MessageResponse)
	err := c.cc.Invoke(ctx, "/seq.v1.SequenceService/GenerateMessageSeq", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SequenceServiceServer is the server API for SequenceService service.
// All implementations must embed UnimplementedSequenceServiceServer
// for forward compatibility
type SequenceServiceServer interface {
	GenerateMessageId(context.Context, *Empty) (*MessageIdResponse, error)
	GenerateMessageSeq(context.Context, *MessageSeqRequest) (*MessageResponse, error)
	mustEmbedUnimplementedSequenceServiceServer()
}

// UnimplementedSequenceServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSequenceServiceServer struct {
}

func (UnimplementedSequenceServiceServer) GenerateMessageId(context.Context, *Empty) (*MessageIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateMessageId not implemented")
}
func (UnimplementedSequenceServiceServer) GenerateMessageSeq(context.Context, *MessageSeqRequest) (*MessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateMessageSeq not implemented")
}
func (UnimplementedSequenceServiceServer) mustEmbedUnimplementedSequenceServiceServer() {}

// UnsafeSequenceServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SequenceServiceServer will
// result in compilation errors.
type UnsafeSequenceServiceServer interface {
	mustEmbedUnimplementedSequenceServiceServer()
}

func RegisterSequenceServiceServer(s grpc.ServiceRegistrar, srv SequenceServiceServer) {
	s.RegisterService(&SequenceService_ServiceDesc, srv)
}

func _SequenceService_GenerateMessageId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SequenceServiceServer).GenerateMessageId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/seq.v1.SequenceService/GenerateMessageId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SequenceServiceServer).GenerateMessageId(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _SequenceService_GenerateMessageSeq_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MessageSeqRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SequenceServiceServer).GenerateMessageSeq(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/seq.v1.SequenceService/GenerateMessageSeq",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SequenceServiceServer).GenerateMessageSeq(ctx, req.(*MessageSeqRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SequenceService_ServiceDesc is the grpc.ServiceDesc for SequenceService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SequenceService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "seq.v1.SequenceService",
	HandlerType: (*SequenceServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GenerateMessageId",
			Handler:    _SequenceService_GenerateMessageId_Handler,
		},
		{
			MethodName: "GenerateMessageSeq",
			Handler:    _SequenceService_GenerateMessageSeq_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sequence.proto",
}
